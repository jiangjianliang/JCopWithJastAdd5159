package jcop.generation.jcopaspect.internal;

import jcop.tools.Tools;

public class SourceCodeBuffer
  implements CharSequence
{
  private StringBuffer buffer;
  private int indent;

  public SourceCodeBuffer()
  {
    this.buffer = new StringBuffer();
    this.indent = 0;
  }

  public void instantiatePatternWith(CharSequence key, CharSequence value) {
    instantiatePatternWith(new CharSequence[][] { { key, value } });
  }

  public void instantiatePatternWith(CharSequence[][] patternValues) {
    this.buffer = new StringBuffer(Tools.instantiatePattern(this.buffer, patternValues));
  }

  private String getIndent()  {
    String indentString = "";
    for (int i = 0; i < this.indent; i++)
      indentString = indentString + "    ";
    return indentString;
  }

  public void add(CharSequence other) {
    this.buffer.append(other);
  }

  public void put(CharSequence[] tokens) {
    this.buffer.append(getIndent());
    for (CharSequence token : tokens)
      this.buffer.append(token);
  }

  public void put(StringBuffer[] tokens) {
    this.buffer.append(getIndent());
    for (StringBuffer token : tokens)
      this.buffer.append(token);
  }



  public void putLine(CharSequence... tokens)  {
    put(tokens);
    this.buffer.append('\n');
  }

  public String toString()  {
    return this.buffer.toString();
  }

  public void closeBracket() {
    this.indent -= 1;
    putLine(new CharSequence[] { "}" });
  }

  public void putLineOpenBracket(CharSequence... tokens) {
    put(tokens);
    openBracket();
  }

  private void openBracket()  {
    putLine(new CharSequence[] { "{" });
    this.indent += 1;
  }

  public void indent(boolean b) {
    if (b) this.indent += 1; else
      this.indent -= 1;
  }

  public void putSysoutStmt(String string) {
    putLine(new CharSequence[] { sysoutStmt(string) });
  }

  public void putGeneratedReference(String comment) {
    putCommentLine("generated by " + comment);
  }

  public void putCommentLine(CharSequence comment) {
    putLine(new CharSequence[] { "//", comment });
  }

  public String sysoutStmt(String string) {
    return "System.err.println(\"" + string + "\");";
  }

  public void putMethod(CharSequence comment, CharSequence signature, CharSequence[] stmts) {
    putCommentLine(comment);
    putLineOpenBracket(new CharSequence[] { signature });
    putLines(stmts);
    closeBracket();
  }

  public void putLines(CharSequence[] strings) {
    for (CharSequence s : strings)
      putLine(new CharSequence[] { s });
  }

  public void putBlock(CharSequence[] stmts) {
    openBracket();
    putLines(stmts);
    closeBracket();
  }

  public void putTryFinally(CharSequence tryBlock, CharSequence finallyBlock)
  {
    putLineOpenBracket(new CharSequence[] { "try" });
    add(tryBlock);
    closeBracket();
    putLineOpenBracket(new CharSequence[] { "finally" });
    add(finallyBlock);
    closeBracket();
  }

  public char charAt(int index)
  {
    return this.buffer.charAt(index);
  }

  public int length()
  {
    return this.buffer.length();
  }

  public CharSequence subSequence(int start, int end)
  {
    return this.buffer.subSequence(start, end);
  }

  public void putAdvice(CharSequence comment, CharSequence adviceHeader, CharSequence pointcut, CharSequence block)
  {
    putCommentLine(comment);
    putLine(new CharSequence[] { adviceHeader });
    putLine(new CharSequence[] { pointcut });
    openBracket();
    putLine(new CharSequence[] { block });
    closeBracket();
  }
}