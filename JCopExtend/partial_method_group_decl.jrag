aspect PartialMethodGroupDecl {			//eq PartialMethodGroup.getBodyGroupList().reachable() = true;		eq PartialMethodGroupDecl.getBodyGroup(int i).reachable() = true;	eq PartialMethodGroupDecl.getBodyGroup(int i).reportUnreachable() = true;				public boolean PartialMethodGroupDecl.isPartialMethod(){		return false;	}		public boolean MethodDecl.isPartialMethodGroups() {		return false;	}		public boolean PartialMethodGroupDecl.isPartialMethodGroups(){		return true;	}	//different from PartialMethodDecl	public TypeDecl PartialMethodGroupDecl.hostType() {		NamePattern p = getNamePatternNoTransform();				if (p instanceof DotNamePattern) {	 			  NamePattern typePattern = ((DotNamePattern)p).getLhs();						 TypeDecl found =  lookupHostType(typePattern);					 return found;		}		jcop.compiler.JCopCompiler.abort(sourceFile(), sourceLineNumber(), "Cannot find base declaration for partial method group: %s in %s", p , getEnclosingLayer().getFullQualifiedName() );		 return null;	  } 		//different from PartialMethodDecl	private LayerDecl PartialMethodGroupDecl.getEnclosingLayer() {		//TODO wander maybe it is wrong here		try {			return ((LayerDecl)parent.parent);		}		catch(ClassCastException e) {    						jcop.compiler.JCopCompiler.abort(sourceFile(), sourceLineNumber(), "Enclosing type declaration of partial method group'%s' is not a layer declaration!", getID() );			return null;		}   }      private ClassDecl PartialMethodGroupDecl.lookupHostType(NamePattern typePattern){    	    	if (typePattern instanceof DotNamePattern) {    					 DotNamePattern dtp = (DotNamePattern)typePattern;			 			 String pckg = dtp.getLhs().toString();						 String typeName = dtp.getRhs().toString();			 			 ClassDecl type = (ClassDecl)lookupType(pckg, typeName);			 			 if (type != null)  {							 return type; 			 }											 ClassDecl host = lookupHostType(dtp.getLhs());			 if (host != null) {						 for (BodyDecl element : host.getBodyDecls()) {					 if(element instanceof MemberClassDecl) {					 						 ClassDecl nestedType = ((MemberClassDecl)element).getClassDecl();											 if (nestedType.getID().equals(typeName)) {							 							 return nestedType;						 }					 }			 				 }			 }    	}		jcop.compiler.JCopCompiler.abort(sourceFile(), sourceLineNumber(), jcop.Globals.Msg.pmdHostNotFound, getNamePattern() );		return null;    				}		public String PartialMethodGroupDecl.getProceedOrder() {		for (Modifier modifier : getModifiers().getModifierList())			if (isPreceedenceModifier(modifier))				return modifier.getID();		return "";	}	private boolean PartialMethodGroupDecl.isPreceedenceModifier(Modifier modifier) {		String id = modifier.getID();		return id.equals("before") || id.equals("after");	}		public String PartialMethodGroupDecl.signature() {    	    	StringBuffer s = new StringBuffer();    	String name = getNamePattern().toString();    	    	name = name.substring(name.lastIndexOf(".") + 1);    	    	s.append(name);    	s.append("(");    	for(int i = 0; i < getNumParameter(); i++) {    		if(i != 0) s.append(", ");    	    s.append(getParameter(i).type().erasure().typeName());    	}        s.append(")");    	  			  		return s.toString();  	}		public String PartialMethodGroupDecl.getID() {		    	String fqn = getNamePattern().toString();	    	String id = fqn.substring(fqn.lastIndexOf(".") + 1);	    	return id;	      		}		public String PartialMethodGroupDecl.name() {	      	return getNamePattern().toString();	}		//different from PartialMethodDecl	public void PartialMethodGroupDecl.toString(StringBuffer s){		s.append(indent());		getModifiers().toString(s);		getTypeAccess().toString(s);		s.append(" ");		getNamePattern().toString(s);		s.append("("); 		if(getNumParameter() > 0) {		  getParameter(0).toString(s);		  for(int i = 1; i < getNumParameter(); i++) {			s.append(", ");			getParameter(i).toString(s);		  }		}		s.append(")");		if(getNumException() > 0) {		  s.append(" throws ");		  getException(0).toString(s);		  for(int i = 1; i < getNumException(); i++) {			s.append(", ");			getException(i).toString(s);		  }		}		//TODO wander		for(int i=0; i< getNumBodyGroup();i++){			s.append("(");			getBodyGroup(i).toString(s);			s.append(")");		}	}		//different from MethodDecl	public TypeDecl PartialMethodGroupDecl.declaringType() {	  	  if ( isPartialMethod() || isPartialMethodGroups()) 		  		  return jcop.transformation.lookup.Lookup.lookupLayerClassDecl((LayerDeclaration)parent.parent);	  	  else 		  return hostType();		  	}		//MethodDecl.nameCheck()}